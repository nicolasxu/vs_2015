swagger: '2.0'
info:
  description: >
    This is a sample server Petstore server.




    [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger`
    on irc.freenode.net.





    For this sample, you can use the api key `special-key` to test the
    authorization filters
  version: 1.0.0
  title: vitaSpider API Document
  termsOfService: 'http://helloreverb.com/terms/'
  contact:
    name: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
schemes:
  - http
paths:
  /account:
    post:
      tags:
        - account
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        '201':
          description: > 
                    code: 2000, message: Account successfully created
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/NewUserCreated'
        '200':
          description: | 
                    code: 4001, message: account already existed (activated)
                    
                    code: 4002, message: email is invalid
                    
                    code: 4003, message: password doesn't meet min requirement
                    
                    code: 4004, message: account exist, but not activated and send activation mail again
          examples: 
            application/json:
              name: Puma
              type: Dog
              color: Black
              gender: Female
              breed: Mixed
              
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/NewUserCreated'
        '400':
          description: 'invalid api call'
          schema:
            type: string
            title: 'bad request'
    put:
      tags:
        - account
      description: >
        Update account user info, not all attributes have to be present. If email
        is being updated, email has to check uniqueness and send activation mail.
        If user email is changed, this account will be logout.
      parameters:
        - in: body
          name: user basic info
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: |
            code: 2000, message: Update success
            
            code: 4000, message: Password doesn't meet requirement
            code: 4001, message: account already exist
            code: 4002, message: account name  invalid
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/User'
        '401':
          description: User password does not meet requirement
          schema:
            type: string
            title: invalid request
          
  /account/exist:
    get:
      tags:
        - account
      summary: check if the account name is available
      description: check if an account is exist
      operationId: userExist
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          description: the email as account name to check existance
          required: true
          type: string
      responses:
        '200':
          description: | 
            code: 2000, message: user account exist
            code: 2001, message: user account does not exist
            code: 4002, message: input is not valid
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
            
  /account/auth:
    post:
      tags:
        - account
      description: login an account
      parameters:
        - in: body
          name: login info
          description: account login info
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: |
            account login successfully
            
            code: 2000, message: login successfully
            code: 4001, message: account dosn't exist
            code: 4002, message: password is incorrect
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/User'
        '401':
          description: "account name doesn't exist"
          schema:
            type: string
            title: invalid request
    delete:
      tags:
        - account
      description: log out an account
      responses:
        '200':
          description: |
            account logout successfully
            
            code: 2000, message: logout success
            code: 4000, message: logout failed
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
            
  /company/:
    post:
      tags:
        - company
      description: "For createing user's own company only. In MongoDB, save companyId to user company attribute. Save the company object in company document. \n"
      parameters:
        - in: body
          name: company meta data
          description: 'Company name is required, the rest is optional'
          required: true
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: | 
            success
            code: 2000, message: create company successful
            code: 4000, message: company name cannot be empty
            code: 4001, message: user company exist
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
        '401':
          description: company name can not be empty
          schema:
            type: string
            title: invalid request
       
    put:
      description: "update user's own company meta data"
      tags:
        - company
      parameters:
        - in: body
          name: company meta data
          description: not all attributes has to be present
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: | 
            code: 2000, message: update success
            code: 4000, message: company name cannot be empty
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
    get:
      tags:
        - company
      description: "get user's own company information"
      responses:
        '200':
          description: | 
            sucess
            code: 2000, message: success
          
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
  /client/:
    get:
      description: return list of clients
      tags:
        - client
      parameters:
        - in: query
          name: page_size
          description: default is 20
          required: false
          type: string
        - in: query
          name: page_index
          description: Starts from 0. Return page 0 if not present
          type: string
          required: false
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/Company'
    post:
      tags:
        - client
      description: "create a client company, private record. In MongoDB, just create a record in company document, and save companyId to the array of client attribute of  user's own company. \n"
      parameters:
        - in: body
          name: client
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            code: 4000, message: company name cannot be empty
            code: 4001, message: email to receive invoice is empty
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
        '401':
          description: company name is empty
          schema:
            type: string
            title: invalid request 
        
  '/client/{clientId}':
    get:
      description: get particualr client detail by client ID
      tags:
        - client
      parameters:
        - in: path
          description: 'client ID, which is the same as company ID in company document'
          name: clientId
          required: true
          type: string
      responses:
        '200':
          description: | 
            success
            code: 4000, message: client doesn't exist or cannot be accessed
        
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
    put:
      description: update private client info by ID
      tags:
        - client
      parameters:
        - in: path
          required: true
          name: clientId
          type: string
        - in: body
          required: true
          name: client data
          description: Only update attributes that are present in the object
          schema:
            $ref: '#/definitions/Company'
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            code: 4000, message: client doesn't exist or cannot be accessed
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Company'
        '400':
          description: invalid request
          schema:
            type: string
            title: invalid request
    delete:
      tags:
        - client
      parameters:
        - in: path
          name: clientId
          required: true
          type: string
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            code: 4000, message: company doesn't exist or cannot be deleted. 
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
  /request/:
    post:
      tags:
        - request
      parameters:
        - in: body
          required: true
          name: request
          schema:
            $ref: '#/definitions/Request'
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
    get:
      tags:
        - request
      parameters:
        - in: query
          name: page_index
          type: string
          required: false
        - in: query
          name: page_size
          type: string
          required: false
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/Request'
    put:
      description: Approve or reject request. User can only approve or reject request that is sent to his company.
      tags:
        - request
      parameters:
        - in: body
          required: true
          description: approve or reject request
          name: request
          schema:
            type: object
            properties:
              status:
                type: string
      responses:
        '200':
          description: | 
            successfully rejected or approved request
            code: 2000, message: success
            code: 4000, message: can not update request
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Request'
        '401':
          description: bad request
          schema:
            type: string
            title: invalid request
  /invoice/:
    get:
      description: "get the invoice list, containing the meta data of each invoice, but not invoice representation. \n"
      tags:
        - invoice
      parameters:
        - in: query
          name: page_size
          type: string
          required: false
          default: '20'
        - in: query
          name: page_index
          type: string
          required: false
          default: '0'
        - in: query
          name: type
          required: true
          type: string
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            code: 4000, message: type is not specified, must be 'sent' or 'received'
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/InvoiceMeta'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
    post:
      description: send invoice
      tags:
        - invoice
      parameters:
        - in: body
          name: invoice
          required: true
          schema:
            $ref: '#/definitions/InvoiceMeta'
      responses:
        '200':
          description: | 
            success
            code: 2000, message: invoice sent successfully
            code: 4000, message: fromId, toId is empty
            code: 4001, message: fromId or toId is not correct
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
        '401':
          description: bad request
          schema:
            type: string
            title: bad request
    put:
      description: 'used to void invoice, invoice cannot be changed if sent'
      tags:
        - invoice
      parameters:
        - in: body
          name: invoiceId
          required: true
          schema:
            type: object
            properties:
              invoiceid: 
                type: string
        
      responses:
        '200':
          description: | 
            success
            code: 2000, message: invoice voided successfully
            code: 4000, message: invoice id is not correct, not accessable 
            code: 4001, message: invoice is already voided
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
            
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
            
  /invoice/payment:
    post:
      description: 'create a payment, pay invoice'
      tags:
        - invoice
      parameters:
        - in: body
          name: payment
          schema:
            $ref: '#/definitions/Payment'
      responses:
        '200':
          description: | 
            payment successfully created
            code: 2000, message: payment successfully made
            code: 4000, message: payment failed, since payment was made before
            code: 4001, message: invoice doesn't exist, or cannot made
            code: 4002, message: banking info error
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/PaymentConfirm'

        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
           
  /invoice/template:
    post:
      description: create invoice template. Each company can only create its own template
      tags:
        - invoice
      parameters:
        - in: body
          name: invoiceTemplate
          description: the template should use specific css ID in html tag to marke for the invoice meta data
          schema:
            $ref: '#/definitions/Template'
      responses:
        '200':
          description: |
            success
            code: 2000, message: template created success
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
    get:
      description: 'get invoice template list, only get template id and name'
      tags:
        - invoice
      parameters:
        - in: query
          name: page_size
          type: string
          default: '20'
        - in: query
          name: page_index
          type: string
          default: '0'
      responses:
        '200':
          description: |
            success
            code: 2000, message: success
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                type: array
                items:
                  $ref: '#/definitions/TemplateMeta'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
              
  '/invoice/template/{templateId}':
    get:
      description: get the invoice template detail info for rendering invoice layout
      tags:
        - invoice
      parameters:
        - in: path
          name: templateId
          type: string
          required: true
      responses:
        '200':
          description: | 
            success
            code: 2000, message: success
            code: 4000, message: invalid template ID 
          schema:
            type: object
            properties:
              meta:
                $ref: '#/definitions/Meta'
              data:
                $ref: '#/definitions/Template'
        '401':
          description: invalid request
          schema:
            type: string
            title: invalid request
definitions:
  Account:
    description: same two attributes in User object
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  User:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      first:
        type: string
      last:
        type: string
      role:
        type: string
  NewUserCreated:
    type: object
    properties:
      id:
        type: string
      email:
        type: string
      
  Company:
    description: "< The company that could be client or vendor of a company One user to one company. User must create and join a company if he doesn't have any company. User can create many other user under this company for different roles, e.g. staff, manager, or read only user."
    type: object
    properties:
      id:
        type: string
        description: Empty when creating a record
      name:
        type: string
        description: 'Not empty when creating record, or updating this field'
      email:
        type: string
        description: 'Email to receive invoice. must be present when creating private client/vendor, otherwise is ignored'
      address:
        type: string
      city:
        type: string
      state:
        type: string
      zip:
        type: string
      country:
        type: string
      phone:
        type: string
      product_service:
        type: string
      year_founded:
        type: number
      employee_count:
        type: number
  Request:
    description: client or vendor request JSON
    type: object
    properties:
      clientId:
        type: string
      clientName:
        type: string
      vendorId:
        type: string
      vendorName:
        type: string
      fromId:
        type: string
      toId:
        type: string
      status:
        type: string
        description: 'accepted, rejected, or empty'
  InvoiceMeta:
    type: object
    properties:
      id:
        type: string
      fromId:
        type: string
      fromName:
        type: string
      toId:
        type: string
      toName:
        type: string
      status:
        type: string
      term:
        type: string
      sentDate:
        type: string
      amount:
        type: number
      paid:
        type: string
      note:
        type: string
      invoiceLookId:
        type: string
        description: >
          ID links to invoice representation data (html and css combined data
          string)
  Payment:
    type: object
    properties:
      bankAccount:
        type: string
      routeNumber:
        type: string
      saveBankInfo:
        type: boolean
      invoiceId:
        type: string
  TemplateMeta:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
  Template:
    type: object
    properties:
      name:
        type: string
      html:
        type: string
      css:
        type: string
      javascript:
        type: string
  Meta:
    type: object
    properties:
      code:
        type: number
      message:
        type: string
  PaymentConfirm:
    type: object
    properties:
      transactionId:
        type: string
      timestamp:
        type: string

